#!/usr/bin/env python

## Copyright (c) 2009 Andrew D. Straw

## Permission is hereby granted, free of charge, to any person obtaining a copy
## of this software and associated documentation files (the "Software"), to deal
## in the Software without restriction, including without limitation the rights
## to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
## copies of the Software, and to permit persons to whom the Software is
## furnished to do so, subject to the following conditions:

## The above copyright notice and this permission notice shall be included in
## all copies or substantial portions of the Software.

## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
## AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
## OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
## THE SOFTWARE.

from lxml import etree # Ubuntu Karmic package: python-lxml
import sys
from optparse import OptionParser

VERSION = '0.0.1'

UNITS = ['pt','px','in']
PT2IN = 1.0/72.0
IN2PT = 72.0
PT2PX = 1.25
PX2PT = 1.0/1.25

def get_unit_attr(value):
    # coordinate handling from http://www.w3.org/TR/SVG11/coords.html#Units
    units = None # default (user)
    for unit_name in UNITS:
        if value.endswith(unit_name):
            units = unit_name
            value = value[:-len(unit_name)]
            break
    val_float = float(value) # this will fail if units str not parsed
    return val_float, units

def convert_to_pixels( val, units):
    if units == 'px' or units is None:
        val_px = val
    elif units == 'pt':
        val_px = val*PT2PX
    elif units == 'in':
        val_px = val*IN2PT*PT2PX
    else:
        raise ValueError('unsupport unit conversion to pixels: %s'%units)
    return val_px

def fix_ids( elem, prefix ):
    ns = '{http://www.w3.org/2000/svg}'

    if elem.tag.startswith(ns):

        tag = elem.tag[len(ns):]

        if 'id' in elem.attrib:
            elem.attrib['id'] = prefix + elem.attrib['id']

        # fix references (See http://www.w3.org/TR/SVGTiny12/linking.html#IRIReference )

        attribs = ['{http://www.w3.org/1999/xlink}href']

        for attrib in attribs:
            value = elem.attrib.get(attrib,None)
            if value is not None:

                if attrib.startswith('{http://www.w3.org/1999/xlink}'):
                    relIRI = False
                else:
                    relIRI = True

                if (not relIRI) and value.startswith('#'): # local IRI, change
                    iri = value[1:]
                    value = '#' + prefix + iri
                    elem.attrib[attrib] = value
                elif relIRI and value.startswith('url(#') and value.endswith(')'): # local IRI, change
                    iri = value[5:-1]
                    value = 'url(#' + prefix + iri + ')'
                    elem.attrib[attrib] = value

        # Do same for children

    for child in elem:
        fix_ids(child,prefix)
    return elem

def main():
    usage = '''%prog FILE1 [FILE2] [...] [options]

concatenate SVG files

This will concatenate FILE1, FILE2, ... to a new svg file printed to
stdout.

'''

    parser = OptionParser(usage, version=VERSION)
    parser.add_option("--margin",type='str',
                      help='size of margin (in px units)',
                      default=None)
    parser.add_option("--direction",type='str',
                      default='vertical',
                      help='horizontal or vertical (or h or v)')
    (options, args) = parser.parse_args()
    fnames = args

    if options.direction.lower().startswith('v'):
        direction = 'vertical'
    elif options.direction.lower().startswith('h'):
        direction = 'horizontal'
    else:
        raise ValueError('unknown direction %s'%options.direction)

    if options.margin is not None:
        margin_px = convert_to_pixels(*get_unit_attr(options.margin))
    else:
        margin_px = 0

    if 0:
        fd = open('tmp.svg',mode='w')
    else:
        fd = sys.stdout

    # get all required namespaces and prefixes
    NSMAP = {None : 'http://www.w3.org/2000/svg' }
    origelems = []
    for fname in fnames:
        origelem = etree.parse(fname).getroot()
        assert origelem.tag == '{http://www.w3.org/2000/svg}svg'
        for key,value in origelem.nsmap.iteritems():
            if key in NSMAP:
                assert value == NSMAP[key]
                # Already in namespace dictionary
                continue
            elif key == 'svg':
                assert value == NSMAP[None]
                # svg is the default namespace - don't insert again.
                continue
            NSMAP[key] = value
        origelems.append(origelem)

    root = etree.Element('{http://www.w3.org/2000/svg}svg',
                         nsmap=NSMAP)

    root.attrib['version']='1.1'
    cum_height_px = 0
    cum_width_px = 0
    max_orthogonal_direction_px = 0
    for fname_num, origelem in enumerate(origelems):

        elem = etree.SubElement(root,'{http://www.w3.org/2000/svg}g')
        elem.attrib['id'] = fname+':%d'%fname_num

        height, height_units = get_unit_attr(origelem.get('height'))
        width, width_units = get_unit_attr(origelem.get('width'))
        width_px = convert_to_pixels( width, width_units)
        height_px = convert_to_pixels( height, height_units)

        if direction=='vertical':
            dir_px = height_px
            orthogonal_direction_px = width_px
        else:
            dir_px = width_px
            orthogonal_direction_px = height_px
        max_orthogonal_direction_px = max(max_orthogonal_direction_px, orthogonal_direction_px)

        # copy svg contents into new group
        for child in origelem:
            elem.append(child)

        fix_ids( elem, fname+':%d:'%fname_num )

        translate_x = 0
        translate_y = 0
        if direction=='vertical':
            translate_y = cum_height_px
            cum_height_px += height_px + margin_px
        else:
            translate_x = cum_width_px
            cum_width_px += width_px + margin_px
        elem.attrib['transform'] = 'translate(%s,%s)'%(translate_x, translate_y)

        root.append( elem )

    if direction=='vertical':
        cum_height_px -= margin_px
    else:
        cum_width_px -= margin_px

    if direction=='vertical':
        root.attrib["width"] = repr(max_orthogonal_direction_px)
        root.attrib["height"] = repr(cum_height_px)
        user_width = max_orthogonal_direction_px
        user_height = cum_height_px

    else:
        root.attrib["height"] = repr(max_orthogonal_direction_px)
        root.attrib["width"] = repr(cum_width_px)
        user_width = cum_width_px
        user_height = max_orthogonal_direction_px

    header_str = """<?xml version="1.0" standalone="no"?>
    <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
      "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
      <!-- Created with svg_stack http://github.com/astraw/svg_stack -->
    """

    fd.write(header_str)
    fd.write( etree.tostring(root, pretty_print=True ))
    fd.close()

if __name__=='__main__':
    main()
